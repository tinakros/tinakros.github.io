import{_ as e,o as a,c as i,a as l}from"./app.6ee2fff9.js";const f=JSON.parse('{"title":"设计模式","description":"","frontmatter":{},"headers":[{"level":2,"title":"设计模式介绍","slug":"设计模式介绍","link":"#设计模式介绍","children":[{"level":3,"title":"什么是设计模式","slug":"什么是设计模式","link":"#什么是设计模式","children":[]},{"level":3,"title":"设计模式历史","slug":"设计模式历史","link":"#设计模式历史","children":[]}]},{"level":2,"title":"创建型模式","slug":"创建型模式","link":"#创建型模式","children":[]},{"level":2,"title":"结构型模式","slug":"结构型模式","link":"#结构型模式","children":[]},{"level":2,"title":"行为型模式","slug":"行为型模式","link":"#行为型模式","children":[]}],"relativePath":"pattern/index.md","lastUpdated":1680525663000}'),t={name:"pattern/index.md"},r=l('<h1 id="设计模式" tabindex="-1">设计模式 <a class="header-anchor" href="#设计模式" aria-hidden="true">#</a></h1><h2 id="设计模式介绍" tabindex="-1">设计模式介绍 <a class="header-anchor" href="#设计模式介绍" aria-hidden="true">#</a></h2><h3 id="什么是设计模式" tabindex="-1">什么是设计模式 <a class="header-anchor" href="#什么是设计模式" aria-hidden="true">#</a></h3><p>软件设计中常见问题的典型解决方案</p><p>设计模式与方法或库的使用方式不同，很难直接去在自己的程序中套用某个设计模式</p><p>解决特定问题的一般性概念</p><p>算法 VS 模式</p><p>设计模式就相当于 售楼部的沙图</p><h3 id="设计模式历史" tabindex="-1">设计模式历史 <a class="header-anchor" href="#设计模式历史" aria-hidden="true">#</a></h3><p>模式 《建筑模式语言》</p><p>《设计模式》 =&gt; 应用到程序开发领域</p><p><img src="https://s2.loli.net/2023/04/02/futz1OFdE9eBcUV.png" alt="设计模式架构图"></p><h2 id="创建型模式" tabindex="-1">创建型模式 <a class="header-anchor" href="#创建型模式" aria-hidden="true">#</a></h2><p>提供创建对象的机制 增加了代码的灵活性以及可复用性</p><ul><li><p>单例模式</p></li><li><p>建造者模式</p></li></ul><h2 id="结构型模式" tabindex="-1">结构型模式 <a class="header-anchor" href="#结构型模式" aria-hidden="true">#</a></h2><ul><li><p>代理模式</p></li><li><p>外观(门面)模式</p></li><li><p>适配器模式</p></li><li><p>装饰器模式</p></li></ul><p>如何将对象和类组装成更大的结构 同时保持了结构的灵活以及高效</p><h2 id="行为型模式" tabindex="-1">行为型模式 <a class="header-anchor" href="#行为型模式" aria-hidden="true">#</a></h2><p>负责对象之间的高效沟通和职责委派</p>',20),d=[r];function n(h,p,s,c,o,_){return a(),i("div",null,d)}const x=e(t,[["render",n]]);export{f as __pageData,x as default};
