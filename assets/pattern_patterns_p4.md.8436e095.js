import{_ as s,o as a,c as n,a as l}from"./app.6ee2fff9.js";const C=JSON.parse('{"title":"观察者模式","description":"","frontmatter":{},"headers":[{"level":2,"title":"概念","slug":"概念","link":"#概念","children":[]},{"level":2,"title":"案例","slug":"案例","link":"#案例","children":[]},{"level":2,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]},{"level":2,"title":"特点","slug":"特点","link":"#特点","children":[]}],"relativePath":"pattern/patterns/p4.md","lastUpdated":1680525663000}'),p={name:"pattern/patterns/p4.md"},o=l(`<h1 id="观察者模式" tabindex="-1">观察者模式 <a class="header-anchor" href="#观察者模式" aria-hidden="true">#</a></h1><h2 id="概念" tabindex="-1">概念 <a class="header-anchor" href="#概念" aria-hidden="true">#</a></h2><div class="tip custom-block"><p class="custom-block-title">概念</p><p>定义了一种一对多的依赖关系，让多个观察者对象同时监听某一个主体对，当主体(subject)对象状态发生变化后时，所有依赖于它的观察者都会收到通知并自动更新。</p><p>有一个subject对象，然后有很多的observers观察者对象，当subject对象有变化的时候去通知observer对象即可</p></div><h2 id="案例" tabindex="-1">案例 <a class="header-anchor" href="#案例" aria-hidden="true">#</a></h2><p>下面列举观察者模式的案例 假设以外卖网站示例</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-palenight"><code><span class="line"><span style="color:#82AAFF;">getAddress</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">address</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">address</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">A</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">update</span><span style="color:#A6ACCD;">(address)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 更新地址</span></span>
<span class="line"><span style="color:#A6ACCD;">B</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">next</span><span style="color:#A6ACCD;">(address)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 渲染界面</span></span>
<span class="line"><span style="color:#A6ACCD;">C</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">change</span><span style="color:#A6ACCD;">(address)</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// 修改订单</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 例如 在这里新增一个D功能</span></span>
<span class="line"><span style="color:#A6ACCD;">D</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">init</span><span style="color:#A6ACCD;">(address)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">/// ----------存在问题------------</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 各个模块和获取地址模块耦合严重，A、B、C 没有发生变化或者有新增的模块，</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 都需要深入到获取地址的代码去修改，一不小心就会改出问题 (bug)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">//  此时 则可以使用观察者模式 进行优化 </span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 定义一个观察者对象 </span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> observers </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> []</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 注册观察者</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">observers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(A</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">update)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">observers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(B</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">next)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">observers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(C</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">change)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">observers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">push</span><span style="color:#A6ACCD;">(D</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">init)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">getAddress</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">res</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">address</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">address</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">observers</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">forEach</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">observer</span><span style="color:#89DDFF;">)</span><span style="color:#C792EA;">=&gt;</span><span style="color:#82AAFF;">observer</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">address</span><span style="color:#F07178;">))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>通过观察者模式将获取后的地址操作解耦出来 未来有新增模块只需要注册观察者</p><p>也产生问题 当出现一个依赖的时候又需要重新去注册 ==&gt; 发布订阅模式 优化</p><h2 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-hidden="true">#</a></h2><ul><li><ol><li>数据绑定 在MVVM框架中，数据模型和视图之间通过观察者模式建立了联系，当数据模型发生变化时，会通知绑定的视图进行更新</li></ol></li><li><ol start="2"><li>事件监听 事件监听也是观察者模式的一种应用，当事件发生时，会通知所有注册了该事件的观察者进行处理</li></ol></li><li><ol start="3"><li>自定义事件 在一些场景下，我们可能需要自定义事件，通过观察者模式来实现事件的注册、触发和处理</li></ol></li><li><ol start="4"><li>状态管理 在一些复杂的应用中，可能需要进行状态管理，例如redux中的状态管理，就是通过观察者模式来实现状态的变化和更新</li></ol></li></ul><h2 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-hidden="true">#</a></h2><ul><li>将某个用起来麻烦且繁琐的功能进行封装，方便使用，其在未来能够更好的应对底层的变化</li><li>将复杂的逻辑分离出来，降低各模块之间的耦合度，提高代码的可维护性和可扩展性</li></ul>`,12),e=[o];function t(c,r,y,i,D,A){return a(),n("div",null,e)}const d=s(p,[["render",t]]);export{C as __pageData,d as default};
